# -*- coding: utf-8 -*-
def ekko2py_NIC(filename):
    """
    Created on Mon Jul 28 12:15:00 2014
    @author Adam Mangel
    EKKO2MAT_pro syntax: [A,t, header]=ekko2mat_pro('filename') where filename 
    has no .hd/.dt1 extension. This function reads a set of binary files 
    generated by the NIC/Spidar interface from Sensors and Software. Presently,
    data is collected using LabVIEW so the output binary files are .bin files.

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    Variable Definitions
    A - Matrix of radar traces (nsamples x ntraces)
    t - travel time vector (nsamples) in nanoseconds

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    NOTE: The structure of the trace header has changed significantly from
    the time of the PE 100 and PE 1000 hardware.

    Column definitions for HEADER (** indicates not read from binary file)
        # 1 - header size (unsigned short 2 bytes)**
        # 2 - header ID (unsigned short 2 bytes)**
        # 3 - count (unsigned long 4 bytes)**
        # 4 - trace number (unsigned long 4 bytes)
        # 5 - odometer tick (unsigned long 4 bytes)**
        # 6 - trace position (m) (double 8 bits)**
        # 7 - duration (s) since data acquisition began (double 8 bits)
        # 8 - trace flag 0 indicates no skip 1 indicates skip (unsigned long 4 bytes)
        # 9 - stacks (unsigned short 2 bytes)**
        #10 - hardware flag (unsigned short 2 bytes)**
        
        Total bytes allotted for header data = 40
    """
    #%% Import neccessary modules
    import pylab as p;
    import struct as S;
    
    #%% Header file reading
    headerfile = filename + "_header.txt";
    header = {'title':'','date':'','ntraces':0,'nppt':0,'samp_int':0,'window':0,\
    'x_init':0,'y_init':0,'acq_int':0,'stacks':0,'no_records':0};
    
    with open(headerfile) as HF:
        line = HF.readlines();
    for i in range(0,12):
        thisline = line[i];
        if thisline[0:5] == "TITLE":
            header['title'] = thisline[7:len(thisline)].strip('\r\n');
        elif thisline[0:4] == "DATE":
            header['date'] = thisline[6:len(thisline)].strip('\r\n');
        elif thisline[0:16] == "NUMBER OF TRACES":
            header['ntraces'] = int(thisline[19:len(thisline)]);
        elif thisline[0:16] == "POINTS PER TRACE":
            header['nppt'] = int(thisline[19:len(thisline)]);
        elif thisline[0:17] == "SAMPLING INTERVAL":
            header['samp_int'] = float(thisline[19:len(thisline)]);
        elif thisline[0:11] == "TIME WINDOW":
            header['window'] = float(thisline[14:len(thisline)]);
        elif thisline[0:19] == "STARTING X POSITION":
            header['x_init'] = float(thisline[22:len(thisline)]);
        elif thisline[0:19] == "STARTING Y POSITION":
            header['y_init'] = float(thisline[22:len(thisline)]);
        elif thisline[0:26] == "TRACE ACQUISITION INTERVAL":
            header['acq_int'] = float(thisline[29:len(thisline)]);
        elif thisline[0:6] == "STACKS":
            header['stacks'] = int(thisline[9:len(thisline)]);
        elif thisline[0:26] == "NUMBER OF POSITION RECORDS":
            header['no_records'] = int(thisline[29:len(thisline)]);
            
    #%% Binary data file reading
    datafilename = filename + '_data.bin';
    #nbytes = 40 + header['nppt'] * 2
    # Initialize Variables
    A = p.zeros((header['nppt'],header['ntraces']));
    tracetime = p.zeros(header['ntraces']);
    # Start reading
    f = open(datafilename, "rb");
    for trace in range(0,header['ntraces']):
        
        # Read the trace header (first 40 bytes)       
	# There is a problem here somewhere with reading the bytes of the traces
        headersize = S.unpack('>H',f.read(2));
        headerID = S.unpack('>H',f.read(2));
        count = S.unpack('>L',f.read(4));
        tracenum = S.unpack('>L',f.read(4)); # read trace number (uint32 unsigned long integer 4 bytes) 
        odotick = S.unpack('>L',f.read(4));
        pos = S.unpack('>d',f.read(8));
        temptime = S.unpack('>d',f.read(8)); # read trace time (double precision 8 bytes)
        tracetime[trace] = temptime[0];
        tflag = S.unpack('>L',f.read(4));
        stacks = S.unpack('>H',f.read(2));
        hflag = S.unpack('>H',f.read(2));
        
        # Read the trace (nppt*2 bytes)
        for samp in range(0,header['nppt']):
            temptrace = S.unpack('>h',f.read(2)); #int16 signed short 2 bytes
            A[samp,trace] = temptrace[0];
            
    f.close();
    
    # Create the time vector
    t = p.arange(0,header['window'],float(header['window'])/float(header['nppt']));
    
    return header, A, tracetime, t
    
def posbin2py(filename):
    posfile = filename + '_pos.bin';    
    
    # Import necessary modules
    import pylab as p;
    import struct as S;

    # Get number of records
    f = open(posfile,"rb");
    allbytes = f.read();
    f.close;
    no_records = int(float(len(allbytes))/32.0)
            
    # Initialize variables
    LVclock = p.zeros((no_records,1));
    xpos = p.zeros((no_records,1));
    ypos = p.zeros((no_records,1));
    offset = p.zeros((no_records,1));
    
    # Start reading
    f = open(posfile,"rb");
    for rec in range(0,no_records):
        LVclock[rec] = S.unpack('>d',f.read(8));
        xpos[rec] = S.unpack('>d',f.read(8));
        ypos[rec] = S.unpack('>d',f.read(8));
        offset[rec] = S.unpack('>d',f.read(8));
    f.close()

    return LVclock, xpos, ypos, offset

def NIC_dataread(filename):
    """
    Created on Mon Jul 28 12:05:23 2014
    @author: Adam Mangel

    #%% Overview
    
    This function will take the root filename, load in radar, position, and
    time data from respective binary files.  Additional data is loaded from a 
    header text file.  These binary files are created in LabVIEW using a customized
    .vi.  Since the NIC is incapable of triggering in space, we must correlate 
    the trace time (seconds since data collection begins) with a clock in LabVIEW
    that begins at the same time. 
    
    #%% Input Variables
    
    filename = filename string, this is the root only since there are two
    binary files and a text file that share the same name with different
    extensions.  For example
    
    filename = '2013_6_6_highres'; Will load the following files:

    2013_6_6_highres_data.bin  <---Radar data file
    2013_6_6_highres_header.txt <---Header text file
    2013_6_6_highres_pos.bin <---Position and time data file
    
    """

    #%% Call functions to read binary data file and header file
    header,A,tracetime,t = ekko2py_NIC(filename);
    
    # Read the binary position file
    LVclock,xpos,ypos,offset = posbin2py(filename);
    
    return header,A,tracetime,t,LVclock,xpos,ypos,offset
    
#header = NIC_dataread("test")
